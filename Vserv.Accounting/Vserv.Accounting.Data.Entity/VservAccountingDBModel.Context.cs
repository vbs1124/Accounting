//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vserv.Accounting.Data.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VservAccountingDBEntities : DbContext
    {
        public VservAccountingDBEntities()
            : base("name=VservAccountingDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeAddress> EmployeeAddresses { get; set; }
        public virtual DbSet<EPFNumber> EPFNumbers { get; set; }
        public virtual DbSet<EPFOffice> EPFOffices { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<OAuthMembership> OAuthMemberships { get; set; }
        public virtual DbSet<OfficeBranch> OfficeBranches { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<ZipCode> ZipCodes { get; set; }
    
        public virtual int InsertErrorLog(string appdomain, string exception, string identity, string level, Nullable<int> line, string logger, string message, string method, string ndc, string property, string stacktrace, string stacktracedetail, Nullable<long> timestamp, string thread, string type, string username)
        {
            var appdomainParameter = appdomain != null ?
                new ObjectParameter("appdomain", appdomain) :
                new ObjectParameter("appdomain", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            var identityParameter = identity != null ?
                new ObjectParameter("identity", identity) :
                new ObjectParameter("identity", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("line", line) :
                new ObjectParameter("line", typeof(int));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var ndcParameter = ndc != null ?
                new ObjectParameter("ndc", ndc) :
                new ObjectParameter("ndc", typeof(string));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var stacktraceParameter = stacktrace != null ?
                new ObjectParameter("stacktrace", stacktrace) :
                new ObjectParameter("stacktrace", typeof(string));
    
            var stacktracedetailParameter = stacktracedetail != null ?
                new ObjectParameter("stacktracedetail", stacktracedetail) :
                new ObjectParameter("stacktracedetail", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(long));
    
            var threadParameter = thread != null ?
                new ObjectParameter("thread", thread) :
                new ObjectParameter("thread", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertErrorLog", appdomainParameter, exceptionParameter, identityParameter, levelParameter, lineParameter, loggerParameter, messageParameter, methodParameter, ndcParameter, propertyParameter, stacktraceParameter, stacktracedetailParameter, timestampParameter, threadParameter, typeParameter, usernameParameter);
        }
    
        public virtual int InsertInfoLog(string appdomain, string identity, string level, string logger, string message, string method, Nullable<long> timestamp, string thread, string type, string username)
        {
            var appdomainParameter = appdomain != null ?
                new ObjectParameter("appdomain", appdomain) :
                new ObjectParameter("appdomain", typeof(string));
    
            var identityParameter = identity != null ?
                new ObjectParameter("identity", identity) :
                new ObjectParameter("identity", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(long));
    
            var threadParameter = thread != null ?
                new ObjectParameter("thread", thread) :
                new ObjectParameter("thread", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInfoLog", appdomainParameter, identityParameter, levelParameter, loggerParameter, messageParameter, methodParameter, timestampParameter, threadParameter, typeParameter, usernameParameter);
        }
    
        public virtual int InsertMvcErrorLog(string appdomain, string aspnetcache, string aspnetcontext, string aspnetrequest, string aspnetsession, string exception, string identity, string level, Nullable<int> line, string logger, string message, string method, string ndc, string property, string stacktrace, string stacktracedetail, Nullable<long> timestamp, string thread, string type, string username)
        {
            var appdomainParameter = appdomain != null ?
                new ObjectParameter("appdomain", appdomain) :
                new ObjectParameter("appdomain", typeof(string));
    
            var aspnetcacheParameter = aspnetcache != null ?
                new ObjectParameter("aspnetcache", aspnetcache) :
                new ObjectParameter("aspnetcache", typeof(string));
    
            var aspnetcontextParameter = aspnetcontext != null ?
                new ObjectParameter("aspnetcontext", aspnetcontext) :
                new ObjectParameter("aspnetcontext", typeof(string));
    
            var aspnetrequestParameter = aspnetrequest != null ?
                new ObjectParameter("aspnetrequest", aspnetrequest) :
                new ObjectParameter("aspnetrequest", typeof(string));
    
            var aspnetsessionParameter = aspnetsession != null ?
                new ObjectParameter("aspnetsession", aspnetsession) :
                new ObjectParameter("aspnetsession", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            var identityParameter = identity != null ?
                new ObjectParameter("identity", identity) :
                new ObjectParameter("identity", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("line", line) :
                new ObjectParameter("line", typeof(int));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var ndcParameter = ndc != null ?
                new ObjectParameter("ndc", ndc) :
                new ObjectParameter("ndc", typeof(string));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var stacktraceParameter = stacktrace != null ?
                new ObjectParameter("stacktrace", stacktrace) :
                new ObjectParameter("stacktrace", typeof(string));
    
            var stacktracedetailParameter = stacktracedetail != null ?
                new ObjectParameter("stacktracedetail", stacktracedetail) :
                new ObjectParameter("stacktracedetail", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(long));
    
            var threadParameter = thread != null ?
                new ObjectParameter("thread", thread) :
                new ObjectParameter("thread", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMvcErrorLog", appdomainParameter, aspnetcacheParameter, aspnetcontextParameter, aspnetrequestParameter, aspnetsessionParameter, exceptionParameter, identityParameter, levelParameter, lineParameter, loggerParameter, messageParameter, methodParameter, ndcParameter, propertyParameter, stacktraceParameter, stacktracedetailParameter, timestampParameter, threadParameter, typeParameter, usernameParameter);
        }
    }
}
